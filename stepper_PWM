/*
This script is being developed as part of a custom solution for opening and closing a choke plate during engine cranking.
This script will be implemented on an ATmega 328p (first on arduino and then on a custom PCB). It will use an L293 dual
H-bridge stepper driver. The basic mechanism will be to use timer0 output compare match A and B to toggle two output pins.
Based on which output pin is toggled by which compare match ISR the direction can be changed. The speed of motion will be
controlled by setting the output compare register values (B should always be half of A).
*/

/*  Macro Definitions  */
#define OCIEB         2 // should be built-in but isn't for some reason
#define OCIEA         1 // should be built-in but isn't for some reason
#define out_pin1    PD6 // pin for stepper driving output 1
#define out_pin2    PD5 // pin for stepper driving output 2
#define out_reg    DDRD // data direction register for output pins
#define out_port  PORTD // port register to set output pin vals

/*  Global Variables  */
// coils required to be global because they will be accessed/changed by various functions
uint8_t coil1 = out_pin1; // corresponds to PD6 at start
uint8_t coil2 = out_pin2; // corresponds to PD5 at start

void setup() {
  
  sei(); // enable interrupts
  
  // Configure output pins as outputs and give them default starting values
  // These are not driven by the timer output compares and need to be driven in ISRs
  out_reg |= _BV(out_pin1) | _BV(out_pin2); // configure as outputs
  out_port |= _BV(out_pin1) | _BV(out_pin2); // both high to start
  
  // Timer0 setup
  
  // CTC Mode (WGM00 -> 0, WGM01 -> 1, WGM02 -> 0), 1024 prescaler (CS00 -> 1, CS01 -> 0, CS02 -> 1)
  TCCR0A |= _BV(WGM01);
  TCCR0A &= ~_BV(WGM00);
  TCCR0B |= _BV(CS02) | _BV(CS00);
  TCCR0B &= ~_BV(CS01) & ~_BV(WGM02);
  
  // disable interrupts on output compare matches A and B, these will be enabled when driving the stepper
  TIMSK0 |= _BV(OCIEB) | _BV(OCIEA);
  
  // Output compare vals
  OCR0A = 0xFF;
  OCR0B = (uint8_t)(OCR0A/2);
  
}

// Interrupt ISRs for output compare match A and B

ISR(TIMER0_COMPA_vect) {
  out_port ^= _BV(coil1);
}

ISR(TIMER0_COMPB_vect) {
  out_port ^= _BV(coil2);
}

void loop() {
  while(1){}
}
